@inject HttpClient Http;
@inject IUriHelper UriHelper;

<div class="top-row pt-4 pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">
        @if (UserState.CurrentUser != null && UserState.CurrentUser.IsSignedIn){
            <h5 class="text-black-50 mb-0">Üdvözöljük @UserState.CurrentUser.LastName @UserState.CurrentUser.FirstName!</h5>
        }
    </a>
    <button class="navbar-toggler" onclick="@ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div></div>

<div class="@NavMenuCssClass" onclick="@ToggleNavMenu">
    <ul class="nav flex-column">
        @if (UserState.CurrentUser != null && UserState.CurrentUser.IsSignedIn)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="albums">
                    <span class="oi oi-image" aria-hidden="true"></span> Albumok
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="fetchdata">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <a href="" class="nav-link" onclick="@Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Kijelentkezés
                </a>
            </li>
        }
    </ul>
</div>

@functions {
    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    public UserStateProvider UserState { get; set; }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    async Task Logout()
    {
        await UserState.LogoutAsync();
        UriHelper.NavigateTo("/", true);
    }
}
